import React, { useState } from 'react';
import { Search, Download, AlertTriangle, CheckCircle, Clock, User, Folder, ChevronDown, ChevronRight } from 'lucide-react';

const ProjectDashboard = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [expandedRows, setExpandedRows] = useState(new Set());

  // 模擬資料
  const memberTableData = [
    {
      id: 1,
      member: '王工程師',
      project: 'A系統',
      system: '會員管理系統',
      task: '登入模組',
      complexity: '中',
      priority: '高',
      progress: 100,
      status: 'completed',
      startDate: '2024-08-15',
      endDate: '2024-08-30',
      actualEndDate: '2024-08-28',
      workload: 80,
      demo: 'https://demo-a.example.com/login',
      screenshots: ['login_page.png', 'validation.png']
    },
    {
      id: 2,
      member: '王工程師',
      project: 'A系統',
      system: '會員管理系統',
      task: '權限模組',
      complexity: '高',
      priority: '高',
      progress: 30,
      status: 'in-progress',
      startDate: '2024-08-29',
      endDate: '2024-09-15',
      actualEndDate: null,
      workload: 80,
      demo: null,
      screenshots: []
    },
    {
      id: 3,
      member: '李工程師',
      project: 'B案件',
      system: 'API服務平台',
      task: 'API開發',
      complexity: '高',
      priority: '中',
      progress: 70,
      status: 'in-progress',
      startDate: '2024-08-10',
      endDate: '2024-09-05',
      actualEndDate: null,
      workload: 85,
      demo: 'https://api-b.example.com/docs',
      screenshots: ['api_docs.png', 'postman_test.png']
    },
    {
      id: 4,
      member: '李工程師',
      project: 'C系統',
      system: '報表平台',
      task: '資料庫設計',
      complexity: '中',
      priority: '中',
      progress: 100,
      status: 'completed',
      startDate: '2024-08-20',
      endDate: '2024-09-01',
      actualEndDate: '2024-08-31',
      workload: 85,
      demo: null,
      screenshots: ['db_schema.png', 'erd_diagram.png']
    },
    {
      id: 5,
      member: '陳工程師',
      project: 'D專案',
      system: '行動應用程式',
      task: '需求分析',
      complexity: '中',
      priority: '低',
      progress: 90,
      status: 'in-progress',
      startDate: '2024-08-01',
      endDate: '2024-09-03',
      actualEndDate: null,
      workload: 75,
      demo: null,
      screenshots: ['wireframe.png', 'user_story.png']
    },
    {
      id: 6,
      member: '陳工程師',
      project: 'E系統',
      system: '庫存管理',
      task: '架構設計',
      complexity: '高',
      priority: '高',
      progress: 45,
      status: 'delayed',
      startDate: '2024-08-15',
      endDate: '2024-09-01',
      actualEndDate: null,
      workload: 75,
      demo: null,
      screenshots: []
    }
  ];

  const projectTableData = [
    {
      id: 1,
      project: 'A系統',
      system: '會員管理系統',
      totalTasks: 5,
      completedTasks: 1,
      inProgressTasks: 1,
      delayedTasks: 0,
      overallProgress: 45,
      status: 'normal',
      projectManager: '王工程師',
      startDate: '2024-08-15',
      expectedEndDate: '2024-10-30',
      currentMilestone: '登入模組完成',
      nextMilestone: '權限模組開發',
      demo: 'https://demo-a.example.com',
      risks: []
    },
    {
      id: 2,
      project: 'B案件',
      system: 'API服務平台',
      totalTasks: 3,
      completedTasks: 0,
      inProgressTasks: 1,
      delayedTasks: 0,
      overallProgress: 30,
      status: 'delayed',
      projectManager: '李工程師',
      startDate: '2024-08-10',
      expectedEndDate: '2024-09-30',
      currentMilestone: 'API開發進行中(70%)',
      nextMilestone: 'API測試與文件',
      demo: 'https://api-b.example.com/docs',
      risks: ['第三方API整合延遲']
    },
    {
      id: 3,
      project: 'C系統',
      system: '報表平台',
      totalTasks: 4,
      completedTasks: 1,
      inProgressTasks: 0,
      delayedTasks: 0,
      overallProgress: 25,
      status: 'normal',
      projectManager: '李工程師',
      startDate: '2024-08-20',
      expectedEndDate: '2024-11-15',
      currentMilestone: '資料庫設計完成',
      nextMilestone: '前端框架建置',
      demo: null,
      risks: []
    },
    {
      id: 4,
      project: 'D專案',
      system: '行動應用程式',
      totalTasks: 6,
      completedTasks: 0,
      inProgressTasks: 1,
      delayedTasks: 0,
      overallProgress: 15,
      status: 'normal',
      projectManager: '陳工程師',
      startDate: '2024-08-01',
      expectedEndDate: '2024-12-31',
      currentMilestone: '需求分析接近完成(90%)',
      nextMilestone: '系統架構設計',
      demo: null,
      risks: []
    },
    {
      id: 5,
      project: 'E系統',
      system: '庫存管理',
      totalTasks: 5,
      completedTasks: 0,
      inProgressTasks: 0,
      delayedTasks: 1,
      overallProgress: 10,
      status: 'risk',
      projectManager: '陳工程師',
      startDate: '2024-08-15',
      expectedEndDate: '2024-11-30',
      currentMilestone: '架構設計延遲',
      nextMilestone: '重新評估需求範圍',
      demo: null,
      risks: ['需求變更頻繁', '技術選型未定案']
    }
  ];

  const toggleRow = (key) => {
    const newExpandedRows = new Set(expandedRows);
    if (newExpandedRows.has(key)) {
      newExpandedRows.delete(key);
    } else {
      newExpandedRows.add(key);
    }
    setExpandedRows(newExpandedRows);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'in-progress': return 'bg-blue-100 text-blue-800';
      case 'delayed': return 'bg-red-100 text-red-800';
      case 'normal': return 'bg-green-100 text-green-800';
      case 'risk': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'completed': return '已完成';
      case 'in-progress': return '進行中';
      case 'delayed': return '延遲';
      case 'normal': return '正常';
      case 'risk': return '風險';
      default: return '未知';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case '高': return 'bg-red-100 text-red-800';
      case '中': return 'bg-yellow-100 text-yellow-800';
      case '低': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getComplexityColor = (complexity) => {
    switch (complexity) {
      case '高': return 'bg-purple-100 text-purple-800';
      case '中': return 'bg-blue-100 text-blue-800';
      case '低': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // 將人員資料按照成員+專案分組
  const getGroupedMemberData = () => {
    const grouped = {};
    
    memberTableData.forEach(item => {
      const key = `${item.member}-${item.project}`;
      if (!grouped[key]) {
        grouped[key] = {
          member: item.member,
          project: item.project,
          system: item.system,
          workload: item.workload,
          tasks: [],
          overallProgress: 0,
          overallStatus: 'normal'
        };
      }
      grouped[key].tasks.push(item);
    });

    // 計算每個成員+專案的整體進度和狀態
    Object.keys(grouped).forEach(key => {
      const group = grouped[key];
      const totalProgress = group.tasks.reduce((sum, task) => sum + task.progress, 0);
      group.overallProgress = Math.round(totalProgress / group.tasks.length);
      
      // 判斷整體狀態
      if (group.tasks.some(task => task.status === 'delayed')) {
        group.overallStatus = 'delayed';
      } else if (group.tasks.some(task => task.status === 'in-progress')) {
        group.overallStatus = 'in-progress';
      } else {
        group.overallStatus = 'completed';
      }
      
      // 計算demo和截圖
      group.demos = group.tasks.filter(task => task.demo).map(task => task.demo);
      group.screenshots = group.tasks.reduce((acc, task) => acc + task.screenshots.length, 0);
    });

    return Object.values(grouped);
  };

  // 將專案資料按照專案分組，包含所有參與的成員和任務
  const getGroupedProjectData = () => {
    const grouped = {};
    
    // 從 memberTableData 中提取每個專案的詳細任務資訊
    memberTableData.forEach(item => {
      if (!grouped[item.project]) {
        // 從 projectTableData 中找到對應的專案基本資訊
        const projectInfo = projectTableData.find(p => p.project === item.project) || {
          system: item.system,
          status: 'normal',
          startDate: item.startDate,
          expectedEndDate: item.endDate,
          currentMilestone: '進行中',
          nextMilestone: '待定',
          demo: null,
          risks: []
        };
        
        grouped[item.project] = {
          project: item.project,
          system: item.system,
          status: projectInfo.status,
          startDate: projectInfo.startDate,
          expectedEndDate: projectInfo.expectedEndDate,
          currentMilestone: projectInfo.currentMilestone,
          nextMilestone: projectInfo.nextMilestone,
          demo: projectInfo.demo,
          risks: projectInfo.risks,
          members: {},
          totalTasks: 0,
          completedTasks: 0,
          inProgressTasks: 0,
          delayedTasks: 0,
          overallProgress: 0
        };
      }
      
      // 按成員分組任務
      if (!grouped[item.project].members[item.member]) {
        grouped[item.project].members[item.member] = {
          member: item.member,
          workload: item.workload,
          tasks: []
        };
      }
      
      grouped[item.project].members[item.member].tasks.push(item);
      grouped[item.project].totalTasks++;
      
      // 統計任務狀態
      if (item.status === 'completed') grouped[item.project].completedTasks++;
      else if (item.status === 'in-progress') grouped[item.project].inProgressTasks++;
      else if (item.status === 'delayed') grouped[item.project].delayedTasks++;
    });

    // 計算每個專案的整體進度
    Object.keys(grouped).forEach(projectKey => {
      const project = grouped[projectKey];
      if (project.totalTasks > 0) {
        const totalProgress = Object.values(project.members)
          .flatMap(member => member.tasks)
          .reduce((sum, task) => sum + task.progress, 0);
        project.overallProgress = Math.round(totalProgress / project.totalTasks);
      }
      
      // 將成員物件轉為陣列以便渲染
      project.membersList = Object.values(project.members);
    });

    return Object.values(grouped);
  };

  // 取得篩選後的資料
  const groupedMemberData = getGroupedMemberData();
  const groupedProjectData = getGroupedProjectData();

  const filteredGroupedData = groupedMemberData.filter(group => {
    const matchesSearch = group.member.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         group.project.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         group.system.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         group.tasks.some(task => task.task.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesStatus = statusFilter === 'all' || group.overallStatus === statusFilter ||
                         group.tasks.some(task => task.status === statusFilter);
    return matchesSearch && matchesStatus;
  });

  const filteredProjectData = groupedProjectData.filter(project => {
    const matchesSearch = project.project.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         project.system.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         project.membersList.some(member => 
                           member.member.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           member.tasks.some(task => task.task.toLowerCase().includes(searchTerm.toLowerCase()))
                         );
    const matchesStatus = statusFilter === 'all' || project.status === statusFilter ||
                         project.membersList.some(member => 
                           member.tasks.some(task => task.status === statusFilter)
                         );
    return matchesSearch && matchesStatus;
  });

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* 標題與操作區 */}
        <div className="mb-6">
          <div className="flex justify-between items-center mb-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">專案進度管理系統</h1>
              <p className="text-gray-600">雙週進度報告 - {new Date().toLocaleDateString('zh-TW')}</p>
            </div>
            <div className="flex gap-2">
              <button className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                <Download className="w-4 h-4" />
                匯出 Excel
              </button>
            </div>
          </div>

          {/* 搜尋與篩選 */}
          <div className="flex gap-4 mb-4">
            <div className="flex-1 relative">
              <Search className="w-4 h-4 absolute left-3 top-3 text-gray-400" />
              <input
                type="text"
                placeholder="搜尋成員、專案或任務..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <select 
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <option value="all">所有狀態</option>
              <option value="completed">已完成</option>
              <option value="in-progress">進行中</option>
              <option value="delayed">延遲</option>
              <option value="normal">正常</option>
              <option value="risk">風險</option>
            </select>
          </div>
        </div>

        {/* 導航標籤 */}
        <div className="mb-6 border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            {[
              { key: 'overview', label: '總覽摘要', icon: AlertTriangle },
              { key: 'members', label: '人員視角表格', icon: User },
              { key: 'projects', label: '專案視角表格', icon: Folder }
            ].map(({ key, label, icon: Icon }) => (
              <button
                key={key}
                onClick={() => setActiveTab(key)}
                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                  activeTab === key
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <Icon className="w-4 h-4" />
                {label}
              </button>
            ))}
          </nav>
        </div>

        {/* 總覽摘要 */}
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* 快速統計 */}
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              <div className="bg-white rounded-lg shadow p-4 text-center">
                <div className="text-2xl font-bold text-blue-600">5</div>
                <div className="text-sm text-gray-600">進行中專案</div>
              </div>
              <div className="bg-white rounded-lg shadow p-4 text-center">
                <div className="text-2xl font-bold text-green-600">2</div>
                <div className="text-sm text-gray-600">已完成任務</div>
              </div>
              <div className="bg-white rounded-lg shadow p-4 text-center">
                <div className="text-2xl font-bold text-yellow-600">4</div>
                <div className="text-sm text-gray-600">進行中任務</div>
              </div>
              <div className="bg-white rounded-lg shadow p-4 text-center">
                <div className="text-2xl font-bold text-red-600">1</div>
                <div className="text-sm text-gray-600">延遲任務</div>
              </div>
              <div className="bg-white rounded-lg shadow p-4 text-center">
                <div className="text-2xl font-bold text-purple-600">80%</div>
                <div className="text-sm text-gray-600">平均工作負荷</div>
              </div>
            </div>

            {/* 風險警示 */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold mb-4 text-red-600 flex items-center gap-2">
                <AlertTriangle className="w-5 h-5" />
                需要注意的項目
              </h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between p-3 bg-red-50 rounded-lg">
                  <div>
                    <span className="font-medium">E系統 - 架構設計</span>
                    <span className="text-sm text-gray-600 ml-2">(陳工程師)</span>
                  </div>
                  <span className="text-red-600 text-sm">進度延遲，需重新評估</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                  <div>
                    <span className="font-medium">B案件 - API開發</span>
                    <span className="text-sm text-gray-600 ml-2">(李工程師)</span>
                  </div>
                  <span className="text-yellow-600 text-sm">第三方API整合可能延遲</span>
                </div>
              </div>
            </div>

            {/* 本期成果與下期目標 */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-4 text-green-600">本期完成成果</h3>
                <div className="space-y-3">
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-5 h-5 text-green-600" />
                    <div>
                      <div className="font-medium">A系統 - 登入模組</div>
                      <div className="text-sm text-gray-600">提前2天完成，包含驗證功能</div>
                    </div>
                  </div>
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-5 h-5 text-green-600" />
                    <div>
                      <div className="font-medium">C系統 - 資料庫設計</div>
                      <div className="text-sm text-gray-600">如期完成，ERD圖已確認</div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-4 text-blue-600">下期重點目標</h3>
                <div className="space-y-3">
                  <div className="flex items-center gap-3">
                    <Clock className="w-5 h-5 text-blue-600" />
                    <div>
                      <div className="font-medium">A系統 - 權限模組開發</div>
                      <div className="text-sm text-gray-600">預計9月15日完成</div>
                    </div>
                  </div>
                  <div className="flex items-center gap-3">
                    <Clock className="w-5 h-5 text-blue-600" />
                    <div>
                      <div className="font-medium">B案件 - API測試</div>
                      <div className="text-sm text-gray-600">API開發完成後立即啟動</div>
                    </div>
                  </div>
                  <div className="flex items-center gap-3">
                    <Clock className="w-5 h-5 text-blue-600" />
                    <div>
                      <div className="font-medium">C系統 - 前端開發</div>
                      <div className="text-sm text-gray-600">框架建置與首頁開發</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* 人員視角表格 */}
        {activeTab === 'members' && (
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-8"></th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">成員</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">專案/系統</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">任務統計</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">整體進度</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">狀態</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">成果</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredGroupedData.map((group) => {
                    const rowKey = `${group.member}-${group.project}`;
                    const isExpanded = expandedRows.has(rowKey);
                    
                    return (
                      <React.Fragment key={rowKey}>
                        {/* 主要行 - 成員+專案概覽 */}
                        <tr className="hover:bg-gray-50 cursor-pointer" onClick={() => toggleRow(rowKey)}>
                          <td className="px-4 py-4 whitespace-nowrap">
                            {isExpanded ? 
                              <ChevronDown className="w-4 h-4 text-gray-400" /> : 
                              <ChevronRight className="w-4 h-4 text-gray-400" />
                            }
                          </td>
                          <td className="px-4 py-4 whitespace-nowrap">
                            <div className="font-medium text-gray-900">{group.member}</div>
                            <div className="text-sm text-gray-500">負荷: {group.workload}%</div>
                          </td>
                          <td className="px-4 py-4">
                            <div className="font-medium text-gray-900">{group.project}</div>
                            <div className="text-sm text-gray-500">{group.system}</div>
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <div>總任務: {group.tasks.length} 項</div>
                            <div className="text-green-600">
                              完成: {group.tasks.filter(t => t.status === 'completed').length}
                            </div>
                            <div className="text-blue-600">
                              進行: {group.tasks.filter(t => t.status === 'in-progress').length}
                            </div>
                            {group.tasks.filter(t => t.status === 'delayed').length > 0 && (
                              <div className="text-red-600">
                                延遲: {group.tasks.filter(t => t.status === 'delayed').length}
                              </div>
                            )}
                          </td>
                          <td className="px-4 py-4">
                            <div className="flex items-center">
                              <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                                <div 
                                  className={`h-2 rounded-full ${group.overallProgress === 100 ? 'bg-green-500' : group.overallStatus === 'delayed' ? 'bg-red-500' : 'bg-blue-500'}`}
                                  style={{ width: `${group.overallProgress}%` }}
                                ></div>
                              </div>
                              <span className="text-sm text-gray-600">{group.overallProgress}%</span>
                            </div>
                          </td>
                          <td className="px-4 py-4">
                            <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(group.overallStatus)}`}>
                              {getStatusText(group.overallStatus)}
                            </span>
                          </td>
                          <td className="px-4 py-4">
                            <div className="space-y-1">
                              {group.demos.length > 0 && (
                                <div className="text-xs text-blue-600">
                                  🔗 {group.demos.length} 個Demo
                                </div>
                              )}
                              {group.screenshots > 0 && (
                                <div className="text-xs text-gray-600">
                                  📸 {group.screenshots} 個截圖
                                </div>
                              )}
                              {group.demos.length === 0 && group.screenshots === 0 && (
                                <span className="text-xs text-gray-400">無</span>
                              )}
                            </div>
                          </td>
                        </tr>
                        
                        {/* 展開的詳細任務行 */}
                        {isExpanded && group.tasks.map((task) => (
                          <tr key={task.id} className="bg-blue-25 border-l-4 border-blue-200">
                            <td className="px-4 py-3"></td>
                            <td className="px-4 py-3 text-sm text-gray-600 pl-8">
                              └ 任務細項
                            </td>
                            <td className="px-4 py-3">
                              <div className="font-medium text-gray-800 text-sm">{task.task}</div>
                            </td>
                            <td className="px-4 py-3">
                              <div className="flex gap-2">
                                <span className={`px-2 py-1 rounded-full text-xs ${getComplexityColor(task.complexity)}`}>
                                  複雜度: {task.complexity}
                                </span>
                                <span className={`px-2 py-1 rounded-full text-xs ${getPriorityColor(task.priority)}`}>
                                  優先: {task.priority}
                                </span>
                              </div>
                            </td>
                            <td className="px-4 py-3">
                              <div className="flex items-center">
                                <div className="w-12 bg-gray-200 rounded-full h-1.5 mr-2">
                                  <div 
                                    className={`h-1.5 rounded-full ${task.progress === 100 ? 'bg-green-500' : task.status === 'delayed' ? 'bg-red-500' : 'bg-blue-500'}`}
                                    style={{ width: `${task.progress}%` }}
                                  ></div>
                                </div>
                                <span className="text-xs text-gray-600">{task.progress}%</span>
                              </div>
                            </td>
                            <td className="px-4 py-3">
                              <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(task.status)}`}>
                                {getStatusText(task.status)}
                              </span>
                            </td>
                            <td className="px-4 py-3">
                              <div className="space-y-1 text-xs">
                                <div>開始: {task.startDate}</div>
                                <div>預計: {task.endDate}</div>
                                {task.actualEndDate && <div className="text-green-600">完成: {task.actualEndDate}</div>}
                                {task.demo && (
                                  <a href={task.demo} className="text-blue-600 hover:underline block" target="_blank" rel="noopener noreferrer">
                                    🔗 Demo
                                  </a>
                                )}
                                {task.screenshots.length > 0 && (
                                  <div className="text-gray-600">
                                    📸 {task.screenshots.join(', ')}
                                  </div>
                                )}
                              </div>
                            </td>
                          </tr>
                        ))}
                      </React.Fragment>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* 專案視角表格 */}
        {activeTab === 'projects' && (
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-8"></th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">專案/系統</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">任務統計</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">整體進度</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">狀態</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">里程碑</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">時程</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">成果/風險</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredProjectData.map((project) => {
                    const rowKey = `project-${project.project}`;
                    const isExpanded = expandedRows.has(rowKey);
                    
                    return (
                      <React.Fragment key={rowKey}>
                        {/* 主要行 - 專案概覽 */}
                        <tr className="hover:bg-gray-50 cursor-pointer" onClick={() => toggleRow(rowKey)}>
                          <td className="px-4 py-4 whitespace-nowrap">
                            {isExpanded ? 
                              <ChevronDown className="w-4 h-4 text-gray-400" /> : 
                              <ChevronRight className="w-4 h-4 text-gray-400" />
                            }
                          </td>
                          <td className="px-4 py-4">
                            <div className="font-medium text-gray-900">{project.project}</div>
                            <div className="text-sm text-gray-500">{project.system}</div>
                            <div className="text-xs text-gray-400 mt-1">
                              參與人員: {project.membersList.map(m => m.member).join(', ')}
                            </div>
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <div>總計: {project.totalTasks} 項</div>
                            <div className="text-green-600">完成: {project.completedTasks}</div>
                            <div className="text-blue-600">進行: {project.inProgressTasks}</div>
                            {project.delayedTasks > 0 && <div className="text-red-600">延遲: {project.delayedTasks}</div>}
                          </td>
                          <td className="px-4 py-4">
                            <div className="flex items-center">
                              <div className="w-20 bg-gray-200 rounded-full h-3 mr-2">
                                <div 
                                  className={`h-3 rounded-full ${project.overallProgress > 70 ? 'bg-green-500' : project.overallProgress > 40 ? 'bg-yellow-500' : 'bg-red-500'}`}
                                  style={{ width: `${project.overallProgress}%` }}
                                ></div>
                              </div>
                              <span className="text-sm font-medium">{project.overallProgress}%</span>
                            </div>
                          </td>
                          <td className="px-4 py-4">
                            <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(project.status)}`}>
                              {getStatusText(project.status)}
                            </span>
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <div className="mb-2">
                              <div className="font-medium text-green-600">目前:</div>
                              <div>{project.currentMilestone}</div>
                            </div>
                            <div>
                              <div className="font-medium text-blue-600">下階段:</div>
                              <div>{project.nextMilestone}</div>
                            </div>
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <div>開始: {project.startDate}</div>
                            <div>預計完成: {project.expectedEndDate}</div>
                          </td>
                          <td className="px-4 py-4 text-sm">
                            <div className="space-y-2">
                              {project.demo && (
                                <a href={project.demo} className="text-blue-600 hover:underline block" target="_blank" rel="noopener noreferrer">
                                  🔗 專案Demo
                                </a>
                              )}
                              {project.risks.length > 0 && (
                                <div>
                                  <div className="font-medium text-red-600 flex items-center gap-1">
                                    <AlertTriangle className="w-3 h-3" />
                                    風險:
                                  </div>
                                  {project.risks.map((risk, index) => (
                                    <div key={index} className="text-red-600 text-xs">• {risk}</div>
                                  ))}
                                </div>
                              )}
                              {!project.demo && project.risks.length === 0 && (
                                <span className="text-gray-400">暫無特殊事項</span>
                              )}
                            </div>
                          </td>
                        </tr>
                        
                        {/* 展開的成員及任務詳細行 */}
                        {isExpanded && project.membersList.map((member) => (
                          <React.Fragment key={`${project.project}-${member.member}`}>
                            {/* 成員標題行 */}
                            <tr className="bg-green-25 border-l-4 border-green-200">
                              <td className="px-4 py-3"></td>
                              <td className="px-4 py-3 text-sm font-medium text-gray-700 pl-8">
                                👤 {member.member}
                                <span className="text-xs text-gray-500 ml-2">(負荷: {member.workload}%)</span>
                              </td>
                              <td className="px-4 py-3 text-sm text-gray-600">
                                {member.tasks.length} 個任務
                              </td>
                              <td className="px-4 py-3">
                                <div className="flex items-center">
                                  <div className="w-12 bg-gray-200 rounded-full h-1.5 mr-2">
                                    <div 
                                      className={`h-1.5 rounded-full bg-blue-500`}
                                      style={{ width: `${Math.round(member.tasks.reduce((sum, task) => sum + task.progress, 0) / member.tasks.length)}%` }}
                                    ></div>
                                  </div>
                                  <span className="text-xs text-gray-600">
                                    {Math.round(member.tasks.reduce((sum, task) => sum + task.progress, 0) / member.tasks.length)}%
                                  </span>
                                </div>
                              </td>
                              <td className="px-4 py-3">
                                <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(
                                  member.tasks.some(t => t.status === 'delayed') ? 'delayed' :
                                  member.tasks.some(t => t.status === 'in-progress') ? 'in-progress' : 'completed'
                                )}`}>
                                  {member.tasks.some(t => t.status === 'delayed') ? '有延遲' :
                                   member.tasks.some(t => t.status === 'in-progress') ? '進行中' : '已完成'}
                                </span>
                              </td>
                              <td className="px-4 py-3"></td>
                              <td className="px-4 py-3"></td>
                              <td className="px-4 py-3"></td>
                            </tr>
                            
                            {/* 該成員的任務詳細行 */}
                            {member.tasks.map((task) => (
                              <tr key={task.id} className="bg-blue-25 border-l-4 border-blue-100">
                                <td className="px-4 py-2"></td>
                                <td className="px-4 py-2 text-sm text-gray-600 pl-12">
                                  └ {task.task}
                                </td>
                                <td className="px-4 py-2">
                                  <div className="flex gap-1">
                                    <span className={`px-1.5 py-0.5 rounded text-xs ${getComplexityColor(task.complexity)}`}>
                                      {task.complexity}
                                    </span>
                                    <span className={`px-1.5 py-0.5 rounded text-xs ${getPriorityColor(task.priority)}`}>
                                      {task.priority}
                                    </span>
                                  </div>
                                </td>
                                <td className="px-4 py-2">
                                  <div className="flex items-center">
                                    <div className="w-10 bg-gray-200 rounded-full h-1 mr-1">
                                      <div 
                                        className={`h-1 rounded-full ${task.progress === 100 ? 'bg-green-500' : task.status === 'delayed' ? 'bg-red-500' : 'bg-blue-500'}`}
                                        style={{ width: `${task.progress}%` }}
                                      ></div>
                                    </div>
                                    <span className="text-xs text-gray-600">{task.progress}%</span>
                                  </div>
                                </td>
                                <td className="px-4 py-2">
                                  <span className={`px-1.5 py-0.5 rounded text-xs ${getStatusColor(task.status)}`}>
                                    {getStatusText(task.status)}
                                  </span>
                                </td>
                                <td className="px-4 py-2 text-xs text-gray-600">
                                  {task.startDate} ~ {task.endDate}
                                  {task.actualEndDate && <div className="text-green-600">完成: {task.actualEndDate}</div>}
                                </td>
                                <td className="px-4 py-2 text-xs text-gray-600">
                                  預計: {task.endDate}
                                </td>
                                <td className="px-4 py-2 text-xs">
                                  {task.demo && (
                                    <a href={task.demo} className="text-blue-600 hover:underline block" target="_blank" rel="noopener noreferrer">
                                      🔗 Demo
                                    </a>
                                  )}
                                  {task.screenshots.length > 0 && (
                                    <div className="text-gray-600">📸 {task.screenshots.length}</div>
                                  )}
                                </td>
                              </tr>
                            ))}
                          </React.Fragment>
                        ))}
                      </React.Fragment>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProjectDashboard;